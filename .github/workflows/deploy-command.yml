name: Deploy Release
on:
  repository_dispatch:
    types: [deploy-command]
jobs:
  deploy-test:
    if: ${{ (github.event.client_payload.slash_command.args.unnamed.arg1 == 'test' && contains(github.event.client_payload.pull_request.head.ref, 'release')) }}
    runs-on: ubuntu-latest
    steps:
      - name: GH Context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github.event.client_payload) }}
        run: echo "$GITHUB_CONTEXT"
      
      - name: Set PR Status Pending
        uses: niteoweb/pull_request_status_action@v1.0.0
        with:
          pr_number: ${{ github.event.client_payload.pull_request.number }}
          state: "pending"
          repository: ${{ github.repository }}
          context: ${{ github.workflow }}
          target_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.pull_request.head.sha }}
          
      - name: Get current package version, clean it and set to envvar
        run: |
          echo ${{ (github.event.client_payload.pull_request.mergeable_state == 'clean' || github.event.client_payload.pull_request.mergeable_state == 'has_hooks') }}
          echo "PKG_VERSION="$(node -p "require('./package.json').version.match(/^(\d+\.)?(\d+\.)?(\*|\d+)/g)[0]") >> $GITHUB_ENV

      - name: Sleep for 120 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '120s'

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}-test
          release_name: Release v${{ env.PACKAGE_VERSION }}-test
          commitish: ${{ github.event.client_payload.pull_request.head.sha }}
          
      - name: Set PR Status Success
        if: ${{ success() }}
        uses: niteoweb/pull_request_status_action@v1.0.0
        with:
          pr_number: ${{ github.event.client_payload.pull_request.number }}
          state: ${{ job.status }}
          repository: ${{ github.repository }}
          context: ${{ github.workflow }}
          target_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Set PR Status Failed
        if: ${{ failure() }}
        uses: niteoweb/pull_request_status_action@v1.0.0
        with:
          pr_number: ${{ github.event.client_payload.pull_request.number }}
          state: ${{ job.status }}
          repository: ${{ github.repository }}
          context: ${{ github.workflow }}
          target_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
      
      - name: Merge pull request
        if: ${{ (success() && (github.event.client_payload.pull_request.mergeable_state == 'clean' || github.event.client_payload.pull_request.mergeable_state == 'has_hooks')) }}
        uses: actions/github-script@v2
        with:
          script: |
            const pull_request = context.payload.client_payload.pull_request
            const repository = context.repo
            await github.pulls.merge({
              owner: repository.owner,
              repo: repository.repo,
              pull_number: pull_request.number,
              merge_method: "squash",
              commit_title: `${pull_request.title} (${pull_request.number})\n`,
            })
